#!/usr/bin/env python3

import serial
import logging
import logging.handlers
import argparse
import sys
import time  # this is only being used as part of the example

# check for the existence of /dev/tty**** !!!
# drivers may be based on the CH34x USB SERIAL CHIP:
# https://tzapu.com/making-ch340-ch341-serial-adapters-work-under-el-capitan-os-x/
# http://www.microcontrols.org/arduino-uno-clone-ch340-ch341-chipset-usb-drivers/

ser = serial.Serial('/dev/ttyUSB0', baudrate=9600, stopbits=1, parity="N",  timeout=2)
port = serial.Serial("/dev/ttyAMA0", baudrate=9600, stopbits=1, parity="N",  timeout=2)

# Endre stien og filnavnet til onsket lokasjon
LOG_FILENAME = "/home/pi/din_logg_fil.log"
LOG_LEVEL = logging.INFO  # Could be e.g. "DEBUG" or "WARNING"

# Define and parse command line arguments
parser = argparse.ArgumentParser(description="SDS011 LOGG")
parser.add_argument("-l", "--log", help="file to write log to (default '" + LOG_FILENAME + "')")

# If the log file is specified on the command line then override the default
args = parser.parse_args()
if args.log:
        LOG_FILENAME = args.log

# Configure logging to log to a file, making a new file at midnight and keeping the last 3 day's data
# Give the logger a unique name (good practice)
logger = logging.getLogger(__name__)
# Set the log level to LOG_LEVEL
logger.setLevel(LOG_LEVEL)
# Make a handler that writes to a file, making a new file at midnight and keeping 3 backups
handler = logging.handlers.TimedRotatingFileHandler(LOG_FILENAME, when="midnight", backupCount=3)
# Format each log message like this
formatter = logging.Formatter('%(asctime)s %(levelname)-8s %(message)s')
# Attach the formatter to the handler
handler.setFormatter(formatter)
# Attach the handler to the logger
logger.addHandler(handler)

# Make a class we can use to capture stdout and sterr in the log
class MyLogger(object):
        def __init__(self, logger, level):
                """Needs a logger and a logger level."""
                self.logger = logger
                self.level = level

        def write(self, message):
                # Only log if there is a message (not just a new line)
                if message.rstrip() != "":
                        self.logger.log(self.level, message.rstrip())

# Replace stdout with logging to file at INFO level
sys.stdout = MyLogger(logger, logging.INFO)
# Replace stderr with logging to file at ERROR level
sys.stderr = MyLogger(logger, logging.ERROR)

while True:

    s = ser.read(1)
    if ord(s) == int("AA",16):
        s = ser.read(1)
        if ord(s) == int("C0",16):
            s = ser.read(7)
            a = []
            for i in s:
                a.append(i)
            #print(a)
            pm2hb= s[0]
            pm2lb= s[1]
            pm10hb= s[2]
            pm10lb= s[3]
            cs = s[6]
            # we should verify the checksum... it is the sum of bytes 1-6 truncated...
            try:

                print("PM2.5 - ", float(pm2hb + pm2lb*256)/10.0 ," PM10 - ", float(pm10hb + pm10lb*256)/10.0)
                PM10=bytearray(" PM10 - ", 'utf8')
                PM2=bytearray(" PM2.5 - ", 'utf8')
                val2= bytearray('{}'.format(float(pm2hb + pm2lb*256)/10.0), 'utf8')
                val10= bytearray('{}'.format(float(pm10hb + pm10lb*256)/10.0), 'utf8')
                newline= bytearray('\n', 'utf8')
                cr= bytearray('\r', 'utf8')
                port.write(PM2)
                port.write(val2)
                port.write(PM10)
                port.write(val10)
                port.write(newline)
                port.write(cr)
                time.sleep(1)
            except:
                pass
    else:
        pass



